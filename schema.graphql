"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  Streamed when true.
  """
  if: Boolean
) on FIELD

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """
  Roles that are allowed to access the annotated resource.
  """
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

type Query {
  book(id: String!): Book
  books: [Book!]!
  todos: [Todo!]!
  users: [User!]!
  user: User!
}

type Mutation {
  createBook(title: String!): Book!
  deleteBook(id: String!): String!
  updateBook(book: BookInput!): Book!
  updateAuthor(id: String!, author: String!): String!
  createTodo(title: String!, body: String): Todo!
  removeTodo(id: String!): String!
  createUser(email: String!, password: String!): User!
  signInUser(email: String!, password: String!): String!
}

type Subscription {
  todoAdded: Todo!
}

type User {
  todos: [Todo!]!
  id: String
  email: String!
  password: String!
}

type Todo {
  user: User!
  id: String
  title: String!
  body: String
  isCompleted: Boolean!
  createdDate: DateTime!
}

type Book {
  id: String
  title: String!
  author: Author
}

input BookInput {
  id: String
  title: String!
  author: AuthorInput
}

input AuthorInput {
  name: String!
}

type Author {
  name: String!
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime
